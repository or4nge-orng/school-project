"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublisherGithub = void 0;
const path_1 = __importDefault(require("path"));
const publisher_base_1 = require("@electron-forge/publisher-base");
const fs_extra_1 = __importDefault(require("fs-extra"));
const mime_types_1 = __importDefault(require("mime-types"));
const github_1 = __importDefault(require("./util/github"));
const no_release_error_1 = __importDefault(require("./util/no-release-error"));
class PublisherGithub extends publisher_base_1.PublisherBase {
    constructor() {
        super(...arguments);
        this.name = 'github';
    }
    async publish({ makeResults, setStatusLine }) {
        var _a;
        const { config } = this;
        const perReleaseArtifacts = {};
        for (const makeResult of makeResults) {
            const release = makeResult.packageJSON.version;
            if (!perReleaseArtifacts[release]) {
                perReleaseArtifacts[release] = [];
            }
            perReleaseArtifacts[release].push(makeResult);
        }
        if (!(config.repository && typeof config.repository === 'object' && config.repository.owner && config.repository.name)) {
            throw new Error('In order to publish to github you must set the "github_repository.owner" and "github_repository.name" properties in your Forge config. See the docs for more info');
        }
        const github = new github_1.default(config.authToken, true, config.octokitOptions);
        const octokit = github.getGitHub();
        for (const releaseVersion of Object.keys(perReleaseArtifacts)) {
            let release;
            const artifacts = perReleaseArtifacts[releaseVersion];
            const releaseName = `${(_a = config.tagPrefix) !== null && _a !== void 0 ? _a : 'v'}${releaseVersion}`;
            setStatusLine(`Searching for target release: ${releaseName}`);
            try {
                release = (await github.getGitHub().repos.listReleases({
                    owner: config.repository.owner,
                    repo: config.repository.name,
                    per_page: 100,
                })).data.find((testRelease) => testRelease.tag_name === releaseName);
                if (!release) {
                    throw new no_release_error_1.default(404);
                }
            }
            catch (err) {
                if (err instanceof no_release_error_1.default && err.code === 404) {
                    // Release does not exist, let's make it
                    release = (await github.getGitHub().repos.createRelease({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        tag_name: releaseName,
                        name: releaseName,
                        draft: config.draft !== false,
                        prerelease: config.prerelease === true,
                    })).data;
                }
                else {
                    // Unknown error
                    throw err;
                }
            }
            let uploaded = 0;
            const updateUploadStatus = () => {
                setStatusLine(`Uploading distributable (${uploaded}/${artifacts.length} to ${releaseName})`);
            };
            updateUploadStatus();
            const flatArtifacts = [];
            for (const artifact of artifacts) {
                flatArtifacts.push(...artifact.artifacts);
            }
            await Promise.all(flatArtifacts.map(async (artifactPath) => {
                const done = () => {
                    uploaded += 1;
                    updateUploadStatus();
                };
                const artifactName = path_1.default.basename(artifactPath);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                if (release.assets.find((asset) => asset.name === artifactName)) {
                    return done();
                }
                await github.getGitHub().repos.uploadReleaseAsset({
                    owner: config.repository.owner,
                    repo: config.repository.name,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    release_id: release.id,
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    url: release.upload_url,
                    // https://github.com/octokit/rest.js/issues/1645
                    data: (await fs_extra_1.default.readFile(artifactPath)),
                    headers: {
                        'content-type': mime_types_1.default.lookup(artifactPath) || 'application/octet-stream',
                        'content-length': (await fs_extra_1.default.stat(artifactPath)).size,
                    },
                    name: path_1.default.basename(artifactPath),
                });
                return done();
            }));
        }
    }
}
exports.default = PublisherGithub;
exports.PublisherGithub = PublisherGithub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHVibGlzaGVyR2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1B1Ymxpc2hlckdpdGh1Yi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsbUVBQWlGO0FBR2pGLHdEQUEwQjtBQUMxQiw0REFBOEI7QUFHOUIsMkRBQW1DO0FBQ25DLCtFQUFxRDtBQVVyRCxNQUFxQixlQUFnQixTQUFRLDhCQUFvQztJQUFqRjs7UUFDRSxTQUFJLEdBQUcsUUFBUSxDQUFDO0lBMkdsQixDQUFDO0lBekdDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFvQjs7UUFDNUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUV4QixNQUFNLG1CQUFtQixHQUVyQixFQUFFLENBQUM7UUFFUCxLQUFLLE1BQU0sVUFBVSxJQUFJLFdBQVcsRUFBRTtZQUNwQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztZQUMvQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2pDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNuQztZQUNELG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksT0FBTyxNQUFNLENBQUMsVUFBVSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RILE1BQU0sSUFBSSxLQUFLLENBQ2IsbUtBQW1LLENBQ3BLLENBQUM7U0FDSDtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksRUFB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